<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Target.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Target.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Tue Aug 13 12:13:29 2024
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; $Super$$main &rArr; thread_key &rArr; uprintf &rArr; USART_bufsend
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC_COMP_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel1_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel2_3_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from py32f0xx_bsp_exti.o(.text.EXTI2_3_IRQHandler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from py32f0xx_bsp_exti.o(.text.EXTI4_15_IRQHandler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from py32f0xx_it.o(.text.HardFault_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from py32f0xx_bsp_i2c.o(.text.I2C1_IRQHandler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1d]">LED_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[14]">LPTIM1_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from py32f0xx_it.o(.text.NMI_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from py32f0xx_it.o(.text.PendSV_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1a]">SPI2_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from py32f0xx_it.o(.text.SVC_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from py32f0xx_it.o(.text.SysTick_Handler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_py32f0xx.o(.text.SystemInit) referenced from startup_py32f030xx.o(.text)
 <LI><a href="#[15]">TIM14_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[16]">TIM16_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[17]">TIM17_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from py32f0xx_bsp_usart.o(.text.USART1_IRQHandler) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[1c]">USART2_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_py32f030xx.o(.text) referenced from startup_py32f030xx.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_py32f030xx.o(.text)
 <LI><a href="#[21]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[1e]">main</a> from system_py32f0xx.o(.text.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[22]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[35]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[11b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[11d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[11e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LED_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ConfigSpeed
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[29]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[27]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[25]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[120]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[121]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[122]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[123]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_py32f0xx.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; $Super$$main &rArr; thread_key &rArr; uprintf &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[37]"></a>ASYNC_I2C_Receive</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, py32f0xx_bsp_i2c.o(.text.ASYNC_I2C_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASYNC_I2C_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BUSY
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_TX
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableBitPOS
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_CapacityLoad
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCRead
</UL>

<P><STRONG><a name="[3c]"></a>ASYNC_I2C_Transmit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, py32f0xx_bsp_i2c.o(.text.ASYNC_I2C_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BUSY
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_TX
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableBitPOS
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
</UL>

<P><STRONG><a name="[3d]"></a>BSP_EXTI_Config</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, py32f0xx_bsp_exti.o(.text.BSP_EXTI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_EXTI_Config &rArr; LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[42]"></a>BSP_GPIO_Config</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, py32f0xx_bsp_gpio.o(.text.BSP_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_GPIO_Config &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[46]"></a>BSP_I2C_Config</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, py32f0xx_bsp_i2c.o(.text.BSP_I2C_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_I2C_Config &rArr; LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableReset
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_ERR
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableReset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_EVT
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_BUF
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Diagnosis
</UL>

<P><STRONG><a name="[53]"></a>BSP_PWMChannelConfig</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, py32f0xx_bsp_tim.o(.text.BSP_PWMChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_PWMChannelConfig &rArr; LL_TIM_OC_Init &rArr; OC3Config
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[55]"></a>BSP_PWR_Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, py32f0xx_bsp_pwr.o(.text.BSP_PWR_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PWR_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetRegulVoltageScaling
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableLowPowerRunMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableSleep
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_DisableSleepOnExit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_DisableEventOnPend
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[5b]"></a>BSP_SystemClockConfig</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, py32f0xx_bsp_rcc.o(.text.BSP_SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BSP_SystemClockConfig &rArr; LL_APB1_GRP2_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_EnableIT
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_Disable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_Disable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibFreq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Enable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Disable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitTick
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_SetLatency
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[6c]"></a>BSP_TIM_config</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, py32f0xx_bsp_tim.o(.text.BSP_TIM_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_TIM_config &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableAllOutputs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[71]"></a>BSP_USART_Config</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, py32f0xx_bsp_usart.o(.text.BSP_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_USART_Config &rArr; LL_USART_SetBaudRate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTransferDirection
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetParity
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetHWFlowCtrl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetDataWidth
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_RXNE
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_PE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_ERROR
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_TC
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, py32f0xx_bsp_exti.o(.text.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, py32f0xx_bsp_exti.o(.text.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 592 bytes, Stack size 8 bytes, py32f0xx_bsp_i2c.o(.text.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2C1_IRQHandler &rArr; I2C_Diagnosis &rArr; BSP_I2C_Config &rArr; LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Diagnosis
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_TransmitData8
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ReceiveData8
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TXE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_SB
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_RXNE
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BTF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BERR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_AF
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_ADDR
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStopCondition
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_RX
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_TX
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_RX
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_EVT
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_BUF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_BERR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_AF
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_ADDR
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>I2C_Diagnosis</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, py32f0xx_bsp_i2c.o(.text.I2C_Diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C_Diagnosis &rArr; BSP_I2C_Config &rArr; LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableReset
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>I2C_Unlock</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, py32f0xx_bsp_i2c.o(.text.I2C_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Unlock &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[10b]"></a>Key_DebounceService_10ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, debounce_key.o(.text.Key_DebounceService_10ms))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[10c]"></a>Key_EdgeDetect</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, debounce_key.o(.text.Key_EdgeDetect))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[ee]"></a>Key_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, debounce_key.o(.text.Key_Init))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9e]"></a>Key_Scand</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, debounce_key.o(.text.Key_Scand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Key_Scand &rArr; KEY_GetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[9f]"></a>LED_PWM_Set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, py32f0xx_bsp_tim.o(.text.LED_PWM_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_PWM_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[3e]"></a>LL_EXTI_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableRisingTrig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableFallingTrig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>

<P><STRONG><a name="[44]"></a>LL_GPIO_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMChannelConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
</UL>

<P><STRONG><a name="[4d]"></a>LL_I2C_Init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetOwnAddress1
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Enable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Disable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ConfigSpeed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[b2]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[68]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[6e]"></a>LL_TIM_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetRepetitionCounter
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
</UL>

<P><STRONG><a name="[54]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_TIM_OC_Init &rArr; OC3Config
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMChannelConfig
</UL>

<P><STRONG><a name="[ef]"></a>LL_mDelay</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, py32f0xx_ll_utils.o(.text.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.RCC_GetHCLKClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetHCLKClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[b8]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.RCC_GetPCLK1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetPCLK1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[b6]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetHSIDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[c9]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(.text.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>SW6306_ADCLoad</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_ADCLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SW6306_ADCLoad &rArr; SW6306_Init &rArr; SW6306_Unlock &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[ce]"></a>SW6306_ADCRead</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sw6306.o(.text.SW6306_ADCRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_ADCRead &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
</UL>

<P><STRONG><a name="[d1]"></a>SW6306_ByteModify</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sw6306.o(.text.SW6306_ByteModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_ByteModify &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_LPSet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
</UL>

<P><STRONG><a name="[d2]"></a>SW6306_ByteRead</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_ByteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SW6306_ByteRead &rArr; ASYNC_I2C_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_StatusLoad
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PowerLoad
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortStatusLoad
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_CapacityLoad
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
</UL>

<P><STRONG><a name="[d0]"></a>SW6306_ByteWrite</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sw6306.o(.text.SW6306_ByteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Unlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ForceOff
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Click
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCRead
</UL>

<P><STRONG><a name="[d3]"></a>SW6306_CapacityLoad</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_CapacityLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SW6306_CapacityLoad &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[d4]"></a>SW6306_Click</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_Click))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SW6306_Click &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[d5]"></a>SW6306_ForceOff</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_ForceOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_ForceOff &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[cf]"></a>SW6306_Init</STRONG> (Thumb, 800 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SW6306_Init &rArr; SW6306_Unlock &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Unlock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
</UL>

<P><STRONG><a name="[10f]"></a>SW6306_IsBatteryDepleted</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsBatteryDepleted))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[fb]"></a>SW6306_IsCharging</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsCharging))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[102]"></a>SW6306_IsDischarging</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsDischarging))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[103]"></a>SW6306_IsFullCharged</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsFullCharged))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[fa]"></a>SW6306_IsInitialized</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[110]"></a>SW6306_IsOverHeated</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsOverHeated))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[fd]"></a>SW6306_IsPortA1ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsPortA1ON))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[fe]"></a>SW6306_IsPortA2ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsPortA2ON))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[100]"></a>SW6306_IsPortC1ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsPortC1ON))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[101]"></a>SW6306_IsPortC2ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_IsPortC2ON))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[d7]"></a>SW6306_LPSet</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_LPSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SW6306_LPSet &rArr; SW6306_ByteModify &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteModify
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d8]"></a>SW6306_PortStatusLoad</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_PortStatusLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_PortStatusLoad &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[d9]"></a>SW6306_PowerLoad</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_PowerLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_PowerLoad &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[104]"></a>SW6306_ReadCapacity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadCapacity))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[ff]"></a>SW6306_ReadIBAT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadIBAT))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[fc]"></a>SW6306_ReadIBUS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadIBUS))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[da]"></a>SW6306_ReadTCHIP</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_ReadTCHIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SW6306_ReadTCHIP &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[107]"></a>SW6306_ReadTNTC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadTNTC))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[106]"></a>SW6306_ReadVBAT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadVBAT))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[105]"></a>SW6306_ReadVBUS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw6306.o(.text.SW6306_ReadVBUS))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[cd]"></a>SW6306_RegsetSwitch</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sw6306.o(.text.SW6306_RegsetSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Unlock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_StatusLoad
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PowerLoad
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortStatusLoad
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_LPSet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ForceOff
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Click
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_CapacityLoad
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
</UL>

<P><STRONG><a name="[dc]"></a>SW6306_StatusLoad</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_StatusLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_StatusLoad &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[d6]"></a>SW6306_Unlock</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sw6306.o(.text.SW6306_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SW6306_Unlock &rArr; SW6306_RegsetSwitch &rArr; SW6306_ByteWrite &rArr; ASYNC_I2C_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_RegsetSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[dd]"></a>SysInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_py32f030x6.o(.text.SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SysInit &rArr; BSP_I2C_Config &rArr; LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMChannelConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system_py32f0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, py32f0xx_bsp_usart.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART1_IRQHandler &rArr; LL_USART_ClearFlag_PE
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ReceiveData8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TXE
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_RXNE
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_PE
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_ORE
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_NE
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_FE
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TXE
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_PE
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_ORE
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_NE
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_FE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f030xx.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>USART_bufread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, py32f0xx_bsp_usart.o(.text.USART_bufread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_bufread
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_echo
</UL>

<P><STRONG><a name="[eb]"></a>USART_bufsend</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, py32f0xx_bsp_usart.o(.text.USART_bufsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TXE
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_echo
</UL>

<P><STRONG><a name="[109]"></a>USART_getvalidnum</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.USART_getvalidnum))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_echo
</UL>

<P><STRONG><a name="[36]"></a>$Super$$main</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = $Super$$main &rArr; thread_key &rArr; uprintf &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_trig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_echo
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Unlock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_LPSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_EnableIT
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_DisableIT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableSleep
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableDeepSleep
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>thread_app</STRONG> (Thumb, 1004 bytes, Stack size 8 bytes, main.o(.text.thread_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = thread_app &rArr; uprintf &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_StatusLoad
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadVBUS
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadVBAT
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTNTC
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadTCHIP
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadIBUS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadIBAT
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ReadCapacity
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PowerLoad
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_PortStatusLoad
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortC2ON
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortC1ON
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortA2ON
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsPortA1ON
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsInitialized
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsFullCharged
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsDischarging
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsCharging
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ForceOff
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_Click
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_CapacityLoad
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ByteWrite
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_ADCLoad
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f2]"></a>thread_echo</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, main.o(.text.thread_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = thread_echo &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_getvalidnum
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufread
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f3]"></a>thread_key</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, main.o(.text.thread_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = thread_key &rArr; uprintf &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsOverHeated
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW6306_IsBatteryDepleted
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_PWM_Set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scand
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EdgeDetect
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebounceService_10ms
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f4]"></a>thread_trig</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(.text.thread_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = thread_trig &rArr; uprintf &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f0]"></a>uprintf</STRONG> (Thumb, 44 bytes, Stack size 96 bytes, py32f0xx_bsp_usart.o(.text.uprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uprintf &rArr; USART_bufsend
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_trig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[112]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[124]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[125]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[126]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[111]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
</UL>

<P><STRONG><a name="[2f]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[127]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[128]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[129]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f5]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[10d]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[10e]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[f7]"></a>LL_LPM_EnableDeepSleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_LPM_EnableDeepSleep))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f9]"></a>LL_LPM_EnableSleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_LPM_EnableSleep))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f6]"></a>LL_SYSTICK_DisableIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_SYSTICK_DisableIT))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f8]"></a>LL_SYSTICK_EnableIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_SYSTICK_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[108]"></a>__NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_app
</UL>

<P><STRONG><a name="[9c]"></a>KEY_GetIO</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debounce_key.o(.text.KEY_GetIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_GetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scand
</UL>

<P><STRONG><a name="[9d]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, debounce_key.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetIO
</UL>

<P><STRONG><a name="[a1]"></a>LL_EXTI_DisableEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_DisableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[a5]"></a>LL_EXTI_DisableFallingTrig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_DisableFallingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[a3]"></a>LL_EXTI_DisableIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_DisableIT))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[a7]"></a>LL_EXTI_DisableRisingTrig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_DisableRisingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[a4]"></a>LL_EXTI_EnableEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_EnableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[a8]"></a>LL_EXTI_EnableFallingTrig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_EnableFallingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[a2]"></a>LL_EXTI_EnableIT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[a6]"></a>LL_EXTI_EnableRisingTrig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_exti.o(.text.LL_EXTI_EnableRisingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[ad]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[a9]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[aa]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[ae]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[ac]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[ab]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[b5]"></a>LL_I2C_AcknowledgeNextData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_AcknowledgeNextData))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[af]"></a>LL_I2C_ConfigSpeed</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_ConfigSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[b1]"></a>LL_I2C_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[b4]"></a>LL_I2C_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[b3]"></a>LL_I2C_SetOwnAddress1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_SetOwnAddress1))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[c5]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>

<P><STRONG><a name="[c6]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
</UL>

<P><STRONG><a name="[c8]"></a>LL_RCC_GetHSIDiv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetHSIDiv))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[c7]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[cb]"></a>LL_RCC_HSI_GetFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_HSI_GetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[ca]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[bc]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[c1]"></a>LL_TIM_OC_SetCompareCH1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH1))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>

<P><STRONG><a name="[c2]"></a>LL_TIM_OC_SetCompareCH2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH2))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
</UL>

<P><STRONG><a name="[c3]"></a>LL_TIM_OC_SetCompareCH3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH3))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
</UL>

<P><STRONG><a name="[c4]"></a>LL_TIM_OC_SetCompareCH4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH4))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
</UL>

<P><STRONG><a name="[b9]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[ba]"></a>LL_TIM_SetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[bb]"></a>LL_TIM_SetRepetitionCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_ll_tim.o(.text.LL_TIM_SetRepetitionCounter))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[bf]"></a>OC1Config</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, py32f0xx_ll_tim.o(.text.OC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OC1Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[bd]"></a>OC2Config</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, py32f0xx_ll_tim.o(.text.OC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OC2Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[c0]"></a>OC3Config</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, py32f0xx_ll_tim.o(.text.OC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC3Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[be]"></a>OC4Config</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, py32f0xx_ll_tim.o(.text.OC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OC4Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[86]"></a>LL_EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, py32f0xx_bsp_exti.o(.text.LL_EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>LL_EXTI_IsActiveFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_exti.o(.text.LL_EXTI_IsActiveFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[3f]"></a>LL_EXTI_SetEXTISource</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, py32f0xx_bsp_exti.o(.text.LL_EXTI_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>

<P><STRONG><a name="[41]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_exti.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>

<P><STRONG><a name="[40]"></a>__NVIC_SetPriority</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, py32f0xx_bsp_exti.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Config
</UL>

<P><STRONG><a name="[45]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_gpio.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Config
</UL>

<P><STRONG><a name="[43]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, py32f0xx_bsp_gpio.o(.text.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Config
</UL>

<P><STRONG><a name="[48]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, py32f0xx_bsp_i2c.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[49]"></a>LL_APB1_GRP1_ForceReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_APB1_GRP1_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[4a]"></a>LL_APB1_GRP1_ReleaseReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_APB1_GRP1_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[9b]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
</UL>

<P><STRONG><a name="[99]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
</UL>

<P><STRONG><a name="[9a]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Unlock
</UL>

<P><STRONG><a name="[8b]"></a>LL_I2C_AcknowledgeNextData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_AcknowledgeNextData))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>LL_I2C_ClearFlag_ADDR</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_ClearFlag_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>LL_I2C_ClearFlag_AF</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_ClearFlag_AF))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>LL_I2C_ClearFlag_BERR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_ClearFlag_BERR))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[3a]"></a>LL_I2C_DisableBitPOS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableBitPOS))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
</UL>

<P><STRONG><a name="[51]"></a>LL_I2C_DisableIT_BUF</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableIT_BUF))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>LL_I2C_DisableIT_EVT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableIT_EVT))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>LL_I2C_DisableIT_RX</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableIT_RX))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>LL_I2C_DisableIT_TX</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableIT_TX))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>LL_I2C_DisableReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_DisableReset))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[50]"></a>LL_I2C_EnableIT_ERR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_EnableIT_ERR))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[90]"></a>LL_I2C_EnableIT_RX</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_EnableIT_RX))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[39]"></a>LL_I2C_EnableIT_TX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_EnableIT_TX))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
</UL>

<P><STRONG><a name="[4b]"></a>LL_I2C_EnableReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_EnableReset))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Diagnosis
</UL>

<P><STRONG><a name="[3b]"></a>LL_I2C_GenerateStartCondition</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_GenerateStartCondition))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
</UL>

<P><STRONG><a name="[8c]"></a>LL_I2C_GenerateStopCondition</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_GenerateStopCondition))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>LL_I2C_IsActiveFlag_ADDR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_ADDR))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>LL_I2C_IsActiveFlag_AF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_AF))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>LL_I2C_IsActiveFlag_BERR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_BERR))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>LL_I2C_IsActiveFlag_BTF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_BTF))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[38]"></a>LL_I2C_IsActiveFlag_BUSY</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_BUSY))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Transmit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASYNC_I2C_Receive
</UL>

<P><STRONG><a name="[92]"></a>LL_I2C_IsActiveFlag_RXNE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_RXNE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>LL_I2C_IsActiveFlag_SB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_SB))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>LL_I2C_IsActiveFlag_TXE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_IsActiveFlag_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>LL_I2C_ReceiveData8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>LL_I2C_TransmitData8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.LL_I2C_TransmitData8))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[4e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_i2c.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Config
</UL>

<P><STRONG><a name="[56]"></a>LL_LPM_DisableEventOnPend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_LPM_DisableEventOnPend))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[59]"></a>LL_LPM_DisableSleepOnExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_LPM_DisableSleepOnExit))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[5a]"></a>LL_LPM_EnableSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_LPM_EnableSleep))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[58]"></a>LL_PWR_EnableLowPowerRunMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_PWR_EnableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[57]"></a>LL_PWR_SetRegulVoltageScaling</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_pwr.o(.text.LL_PWR_SetRegulVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Config
</UL>

<P><STRONG><a name="[5d]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, py32f0xx_bsp_rcc.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[5c]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, py32f0xx_bsp_rcc.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[67]"></a>LL_FLASH_SetLatency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[65]"></a>LL_InitTick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[63]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[6a]"></a>LL_RCC_HSE_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_HSE_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[5e]"></a>LL_RCC_HSI_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[60]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[5f]"></a>LL_RCC_HSI_SetCalibFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_HSI_SetCalibFreq))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[69]"></a>LL_RCC_LSE_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_LSE_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[6b]"></a>LL_RCC_LSI_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_LSI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[61]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[64]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[62]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[66]"></a>LL_SYSTICK_EnableIT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_rcc.o(.text.LL_SYSTICK_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockConfig
</UL>

<P><STRONG><a name="[6d]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, py32f0xx_bsp_tim.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
</UL>

<P><STRONG><a name="[6f]"></a>LL_TIM_EnableAllOutputs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_tim.o(.text.LL_TIM_EnableAllOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
</UL>

<P><STRONG><a name="[70]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_tim.o(.text.LL_TIM_EnableCounter))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_config
</UL>

<P><STRONG><a name="[a0]"></a>LL_TIM_OC_SetCompareCH1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_tim.o(.text.LL_TIM_OC_SetCompareCH1))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_PWM_Set
</UL>

<P><STRONG><a name="[72]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[7f]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[7c]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[7e]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[7d]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[7b]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[e6]"></a>LL_USART_ClearFlag_FE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_FE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_FE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>LL_USART_ClearFlag_NE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_NE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_NE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>LL_USART_ClearFlag_ORE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_ORE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_ORE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>LL_USART_ClearFlag_PE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_PE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_PE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>LL_USART_ClearFlag_TC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ClearFlag_TC))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[df]"></a>LL_USART_DisableIT_TXE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_DisableIT_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>LL_USART_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[81]"></a>LL_USART_EnableIT_ERROR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_EnableIT_ERROR))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[80]"></a>LL_USART_EnableIT_PE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_EnableIT_PE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[82]"></a>LL_USART_EnableIT_RXNE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_EnableIT_RXNE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[ed]"></a>LL_USART_EnableIT_TXE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_EnableIT_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
</UL>

<P><STRONG><a name="[e5]"></a>LL_USART_IsActiveFlag_FE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_FE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>LL_USART_IsActiveFlag_NE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_NE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>LL_USART_IsActiveFlag_ORE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_ORE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>LL_USART_IsActiveFlag_PE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_PE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>LL_USART_IsActiveFlag_RXNE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_RXNE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>LL_USART_IsActiveFlag_TXE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsActiveFlag_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>LL_USART_IsEnabledIT_TXE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_IsEnabledIT_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
</UL>

<P><STRONG><a name="[e2]"></a>LL_USART_ReceiveData8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_USART_SetBaudRate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[74]"></a>LL_USART_SetDataWidth</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetDataWidth))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[77]"></a>LL_USART_SetHWFlowCtrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetHWFlowCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[76]"></a>LL_USART_SetParity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetParity))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[75]"></a>LL_USART_SetStopBitsLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetStopBitsLength))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[78]"></a>LL_USART_SetTransferDirection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_SetTransferDirection))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[e0]"></a>LL_USART_TransmitData8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.LL_USART_TransmitData8))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_bufsend
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[83]"></a>__NVIC_SetPriority</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_bsp_usart.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Config
</UL>

<P><STRONG><a name="[114]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[113]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[117]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[116]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
